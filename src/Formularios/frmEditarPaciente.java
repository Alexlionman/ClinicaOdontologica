package Formularios;

import Classes.Conecta;
import Classes.Paciente;
import Classes.PacienteDAO;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class frmEditarPaciente extends javax.swing.JFrame {

    public String situacao = "";

    public boolean verificaPreenchimento() {
        if (txtNome.getText().equals("") || txtEndereco.getText().equals("") || txtCpf.getText().equals("   .   .   -  ")
                || txtRg.getText().equals("  .   .   - ") || txtData.getText().equals("  /  /    ")) {
            return false;
        }
        return true;
    }

    public void habilitaCampos() {
        txtEndereco.setEnabled(true);
        txtNome.setEnabled(true);
        txtCpf.setEnabled(true);
        txtRg.setEnabled(true);
        txtData.setEnabled(true);
        txtProntuario.setEnabled(true);
    }

    public void desabilitaCampos() {
        txtEndereco.setEnabled(false);
        txtNome.setEnabled(false);
        txtCpf.setEnabled(false);
        txtRg.setEnabled(false);
        txtData.setEnabled(false);
        txtProntuario.setEnabled(false);
    }

    public void limparCampos() {
        txtId.setText("");
        txtNome.setText("");
        txtEndereco.setText("");
        txtRg.setText("");
        txtCpf.setText("");
        txtProntuario.setText("");
        txtData.setText("");
    }

    private void carregaTabela() {
        DefaultTableModel modelo = (DefaultTableModel) tblPaciente.getModel();
        modelo.setNumRows(0);
        try {
            java.sql.Connection con = Conecta.getConexao();
            PreparedStatement pstm;
            ResultSet rs;

            pstm = con.prepareStatement("select * from paciente order by nome");
            rs = pstm.executeQuery();

            while (rs.next()) {  //enquanto existirem registros no banco, ele continuar
                modelo.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nome"),
                    rs.getString("cpf"),
                    rs.getString("rg"),
                    rs.getString("nascimento"),});
            }
            pstm.close();
            con.close();
            rs.close();
        } catch (Exception ErroSql) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar a tabela de dados" + ErroSql, "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public frmEditarPaciente() {
        initComponents();
        carregaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtProntuario = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPaciente = new javax.swing.JTable();
        btnSair = new javax.swing.JButton();
        btnExcluirPaciente = new javax.swing.JButton();
        btnEditarPaciente = new javax.swing.JButton();
        btnNovoPaciente = new javax.swing.JButton();
        btnSalvarPaciente = new javax.swing.JButton();
        btnLimparCampos = new javax.swing.JButton();
        txtCpf = new javax.swing.JFormattedTextField();
        txtData = new javax.swing.JFormattedTextField();
        txtRg = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Central de pacientes");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(290, 290, 140, 17);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Informações do paciente");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(270, 10, 172, 17);

        txtNome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNome.setEnabled(false);
        getContentPane().add(txtNome);
        txtNome.setBounds(70, 90, 300, 16);

        jLabel5.setText("Endereço:*");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 250, 70, 14);

        txtId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtId.setEnabled(false);
        getContentPane().add(txtId);
        txtId.setBounds(50, 50, 27, 16);

        jLabel6.setText("ID:*");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(20, 50, 30, 14);

        txtEndereco.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtEndereco.setEnabled(false);
        getContentPane().add(txtEndereco);
        txtEndereco.setBounds(90, 250, 280, 16);

        jLabel7.setText("Nome:*");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(20, 90, 50, 14);

        jLabel8.setText("RG:*");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(20, 170, 30, 14);

        jLabel9.setText("CPF:*");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(20, 130, 40, 14);

        jScrollPane1.setEnabled(false);

        txtProntuario.setColumns(20);
        txtProntuario.setRows(5);
        txtProntuario.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtProntuario.setEnabled(false);
        jScrollPane1.setViewportView(txtProntuario);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(390, 70, 280, 200);

        jLabel10.setText("Prontuário:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(390, 50, 70, 14);

        jLabel11.setText("Data de Nasc:*");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(20, 210, 90, 14);

        tblPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "RG", "Data Nascimento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPacienteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPaciente);
        if (tblPaciente.getColumnModel().getColumnCount() > 0) {
            tblPaciente.getColumnModel().getColumn(0).setMinWidth(40);
            tblPaciente.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblPaciente.getColumnModel().getColumn(0).setMaxWidth(40);
            tblPaciente.getColumnModel().getColumn(1).setMinWidth(280);
            tblPaciente.getColumnModel().getColumn(1).setPreferredWidth(280);
            tblPaciente.getColumnModel().getColumn(1).setMaxWidth(280);
            tblPaciente.getColumnModel().getColumn(2).setMinWidth(110);
            tblPaciente.getColumnModel().getColumn(2).setPreferredWidth(110);
            tblPaciente.getColumnModel().getColumn(2).setMaxWidth(110);
            tblPaciente.getColumnModel().getColumn(3).setMinWidth(110);
            tblPaciente.getColumnModel().getColumn(3).setPreferredWidth(110);
            tblPaciente.getColumnModel().getColumn(3).setMaxWidth(110);
            tblPaciente.getColumnModel().getColumn(4).setMinWidth(110);
            tblPaciente.getColumnModel().getColumn(4).setPreferredWidth(110);
            tblPaciente.getColumnModel().getColumn(4).setMaxWidth(110);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 320, 650, 140);

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagensIcones/btnSairPequeno.png"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });
        getContentPane().add(btnSair);
        btnSair.setBounds(680, 10, 160, 40);

        btnExcluirPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagensIcones/iconExcluir.png"))); // NOI18N
        btnExcluirPaciente.setText("Excluir Paciente");
        btnExcluirPaciente.setEnabled(false);
        btnExcluirPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirPacienteActionPerformed(evt);
            }
        });
        getContentPane().add(btnExcluirPaciente);
        btnExcluirPaciente.setBounds(680, 420, 160, 40);

        btnEditarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagensIcones/iconEditar.png"))); // NOI18N
        btnEditarPaciente.setText(" Editar Paciente");
        btnEditarPaciente.setEnabled(false);
        btnEditarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarPacienteActionPerformed(evt);
            }
        });
        getContentPane().add(btnEditarPaciente);
        btnEditarPaciente.setBounds(681, 270, 160, 41);

        btnNovoPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagensIcones/iconAdd.png"))); // NOI18N
        btnNovoPaciente.setText(" Novo Paciente");
        btnNovoPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoPacienteActionPerformed(evt);
            }
        });
        getContentPane().add(btnNovoPaciente);
        btnNovoPaciente.setBounds(679, 220, 160, 40);

        btnSalvarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagensIcones/iconSalvar.png"))); // NOI18N
        btnSalvarPaciente.setText("Salvar Paciente");
        btnSalvarPaciente.setEnabled(false);
        btnSalvarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarPacienteActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalvarPaciente);
        btnSalvarPaciente.setBounds(679, 320, 160, 40);

        btnLimparCampos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagensIcones/iconLimpar.png"))); // NOI18N
        btnLimparCampos.setText("Limpar Campos");
        btnLimparCampos.setEnabled(false);
        btnLimparCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimparCampos);
        btnLimparCampos.setBounds(680, 370, 160, 40);

        txtCpf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpf.setEnabled(false);
        getContentPane().add(txtCpf);
        txtCpf.setBounds(60, 130, 190, 16);

        txtData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData.setEnabled(false);
        txtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataActionPerformed(evt);
            }
        });
        getContentPane().add(txtData);
        txtData.setBounds(110, 210, 140, 20);

        txtRg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        try {
            txtRg.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###-#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtRg.setEnabled(false);
        txtRg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRgActionPerformed(evt);
            }
        });
        getContentPane().add(txtRg);
        txtRg.setBounds(60, 170, 190, 20);

        setSize(new java.awt.Dimension(866, 513));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void tblPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPacienteMouseClicked
        desabilitaCampos();
        int item = tblPaciente.getSelectionModel().getMinSelectionIndex();  //pega a linha selecionada
        item = (int) tblPaciente.getModel().getValueAt(item, 0);
        Paciente p = new PacienteDAO().pesquisarPaciente(item);
        txtNome.setText(p.getNome());
        txtId.setText(p.getId() + "");
        txtEndereco.setText(p.getEndereco());
        txtCpf.setText(p.getCpf());
        txtRg.setText(p.getRg());
        txtData.setText(p.getNascimento());
        txtProntuario.setText(p.getProntuario());

        btnEditarPaciente.setEnabled(true);
        btnExcluirPaciente.setEnabled(true);
        btnSalvarPaciente.setEnabled(false);
        btnNovoPaciente.setEnabled(true);
        btnLimparCampos.setEnabled(false);
    }//GEN-LAST:event_tblPacienteMouseClicked

    private void btnEditarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarPacienteActionPerformed
        habilitaCampos();
        situacao = "edicao";

        btnNovoPaciente.setEnabled(false);
        btnExcluirPaciente.setEnabled(false);
        btnSalvarPaciente.setEnabled(true);
        btnEditarPaciente.setEnabled(false);
    }//GEN-LAST:event_btnEditarPacienteActionPerformed

    private void btnExcluirPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirPacienteActionPerformed
        switch (JOptionPane.showConfirmDialog(null, "Deseja realmente excluir esse paciente?")) {
            case 0:
                Paciente paciente = new Paciente(Integer.parseInt(txtId.getText()));
                String resp = new PacienteDAO().excluirPaciente(paciente);
                if (resp.equals("OK")) {
                    JOptionPane.showMessageDialog(null, "Paciente excluido com sucesso");
                } else {
                    JOptionPane.showMessageDialog(null, resp);
                }
                carregaTabela();
                limparCampos();
                btnNovoPaciente.setEnabled(true);
                btnEditarPaciente.setEnabled(false);
                btnExcluirPaciente.setEnabled(false);
                btnLimparCampos.setEnabled(false);
                btnSalvarPaciente.setEnabled(false);
                break;

        }
    }//GEN-LAST:event_btnExcluirPacienteActionPerformed

    private void btnNovoPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoPacienteActionPerformed
        limparCampos();
        habilitaCampos();
        btnLimparCampos.setEnabled(true);
        btnSalvarPaciente.setEnabled(true);
        btnNovoPaciente.setEnabled(false);
        btnEditarPaciente.setEnabled(false);
        btnExcluirPaciente.setEnabled(false);
        situacao = "cadastro";
    }//GEN-LAST:event_btnNovoPacienteActionPerformed

    private void btnSalvarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarPacienteActionPerformed
        if (verificaPreenchimento()) {
            if (situacao == "cadastro") {
                Paciente paciente = new Paciente(txtNome.getText(), txtEndereco.getText(), txtCpf.getText(), txtRg.getText(),
                        txtData.getText(), txtProntuario.getText());
                if (new PacienteDAO().verificaCpfExistente(paciente).equals(txtCpf.getText())) {
                    JOptionPane.showMessageDialog(null, "CPF ja cadastrado!\nEsse CPF ja esta cadastrado, digite outro.");
                } else {
                    String resp = new PacienteDAO().gravarPaciente(paciente);
                    if (resp.equals("OK")) {
                        JOptionPane.showMessageDialog(rootPane, "Paciente gravada(o) com sucesso");
                        limparCampos();
                        desabilitaCampos();
                        carregaTabela();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, resp);
                    }
                    situacao = "";
                    btnEditarPaciente.setEnabled(false);
                    btnExcluirPaciente.setEnabled(false);
                    btnLimparCampos.setEnabled(false);
                    btnSalvarPaciente.setEnabled(false);
                    btnNovoPaciente.setEnabled(true);
                }
            } else if (situacao == "edicao") {
                Paciente paciente = new Paciente(txtNome.getText(), Integer.parseInt(txtId.getText()), txtEndereco.getText(),
                        txtCpf.getText(), txtRg.getText(), txtData.getText(), txtProntuario.getText());
                if (new PacienteDAO().verificaCpfExistente(paciente).equals(txtCpf.getText())) {
                    JOptionPane.showMessageDialog(null, "CPF ja cadastrado!\nEsse CPF ja esta cadastrado, digite outro.");
                } else {
                    String resp = new PacienteDAO().editarPaciente(paciente);
                    if (resp.equals("OK")) {
                        JOptionPane.showMessageDialog(null, "Paciente Alterado com sucesso");
                    } else {
                        JOptionPane.showMessageDialog(null, resp);
                    }
                    carregaTabela();
                    limparCampos();
                    situacao = "";
                    btnEditarPaciente.setEnabled(false);
                    btnExcluirPaciente.setEnabled(false);
                    btnLimparCampos.setEnabled(false);
                    btnSalvarPaciente.setEnabled(false);
                    btnNovoPaciente.setEnabled(true);
                }
            } else {
                situacao = "";
            }

        } else {
            JOptionPane.showMessageDialog(null, "Campo Vazio!\nPreencha todos os campos obrigatórios.");
        }
    }//GEN-LAST:event_btnSalvarPacienteActionPerformed

    private void btnLimparCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparCamposActionPerformed

    private void txtRgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRgActionPerformed

    private void txtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEditarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEditarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEditarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEditarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEditarPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditarPaciente;
    private javax.swing.JButton btnExcluirPaciente;
    private javax.swing.JButton btnLimparCampos;
    private javax.swing.JButton btnNovoPaciente;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSalvarPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblPaciente;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextArea txtProntuario;
    private javax.swing.JFormattedTextField txtRg;
    // End of variables declaration//GEN-END:variables
}
